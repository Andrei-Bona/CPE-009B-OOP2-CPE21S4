{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMZuyLQTPEBLAaI833jf2Lm",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Andrei-Bona/CPE-009B-OOP2-CPE21S4/blob/main/Laboratory_Activity_3_Inheritance%2C_Encapsulation%2C_and_Abstraction.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Create a program in python that satisfies the following:\n",
        "Inheritance, Encapsulation, and Abstraction concept with ADT list\n",
        "\n",
        "Class(Employee: emp_id. emp_name, emp_address, Fulltime: allowance, rate, PartTime: rate)\n",
        "\n",
        "Class(Salary: salary_id, Salary, cut_off_date, days_of_work)"
      ],
      "metadata": {
        "id": "sJvtEBa0jxFl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from datetime import date\n",
        "class Employee:\n",
        "    def __init__(self, emp_id, emp_name, emp_address):\n",
        "      self._emp_id = emp_id\n",
        "      self._emp_name = emp_name\n",
        "      self._emp_address = emp_address\n",
        "\n",
        "    def get_emp_id(self):\n",
        "        return self._emp_id\n",
        "\n",
        "    def get_emp_name(self):\n",
        "        return self._emp_name\n",
        "\n",
        "    def get_emp_address(self):\n",
        "        return self._emp_address\n",
        "\n",
        "class Fulltime(Employee):\n",
        "    def __init__(self, emp_id, emp_name, emp_address, allowance, rate):\n",
        "      super().__init__(emp_id, emp_name, emp_address)\n",
        "      self._allowance = allowance\n",
        "      self._rate = rate\n",
        "\n",
        "    def get_allowance(self):\n",
        "        return self._allowance\n",
        "\n",
        "    def get_rate(self):\n",
        "        return self._rate\n",
        "\n",
        "class Parttime(Employee):\n",
        "    def __init__(self,emp_id, emp_name, emp_address, rate):\n",
        "      super().__init__(emp_id, emp_name, emp_address)\n",
        "      self._rate = rate\n",
        "\n",
        "    def get_rate(self):\n",
        "        return self._rate\n",
        "\n",
        "\n",
        "class Salary:\n",
        "    def __init__(self, salary_id, Salary, cut_off_date, days_of_work):\n",
        "      self._salary_id = salary_id\n",
        "      self._Salary = Salary\n",
        "      self._cut_off_date = cut_off_date\n",
        "      self._days_of_work = days_of_work\n",
        "\n",
        "employee1 = Fulltime(1234, 'Andrei', 'Quezon City', 1000, 20)\n",
        "salary1 = Salary('A01', 15000, date.today(), 15)\n",
        "\n",
        "# Fulltimetime employee example\n",
        "print('Employee1: Fulltime')\n",
        "print('Employee ID:', employee1.get_emp_id())\n",
        "print('Employee Name:', employee1.get_emp_name())\n",
        "print('Employee Address:', employee1.get_emp_address())\n",
        "print('Employee Allowance:', employee1.get_allowance())\n",
        "print('Employee Rate:', employee1.get_rate())\n",
        "print('Salary ID:', salary1._salary_id)\n",
        "print('Salary:', salary1._Salary)\n",
        "print('Cut-off Date:', salary1._cut_off_date)\n",
        "print('Days of Work:', salary1._days_of_work)\n",
        "print()\n",
        "\n",
        "# Parttime employee example\n",
        "employee2 = Parttime(5678, 'Nycole', 'Marikina City', 10)\n",
        "salary2 = Salary('A02', 10000, date.today(), 5)\n",
        "print('Employee2: Parttime')\n",
        "print('Employee ID:', employee2.get_emp_id())\n",
        "print('Employee Name:', employee2.get_emp_name())\n",
        "print('Employee Address:', employee2.get_emp_address())\n",
        "print('Employee Rate:', employee2.get_rate())\n",
        "print('Salary ID:', salary2._salary_id)\n",
        "print('Salary:', salary2._Salary)\n",
        "print('Cut-off Date:', salary2._cut_off_date)\n",
        "print('Days of Work:', salary2._days_of_work)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oV_m-E06j8RT",
        "outputId": "21fa66e4-37f3-4e4f-eb3e-954c737f9831"
      },
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Employee1: Fulltime\n",
            "Employee ID: 1234\n",
            "Employee Name: Andrei\n",
            "Employee Address: Quezon City\n",
            "Employee Allowance: 1000\n",
            "Employee Rate: 20\n",
            "Salary ID: A01\n",
            "Salary: 15000\n",
            "Cut-off Date: 2024-09-23\n",
            "Days of Work: 15\n",
            "\n",
            "Employee2: Parttime\n",
            "Employee ID: 5678\n",
            "Employee Name: Nycole\n",
            "Employee Address: Marikina City\n",
            "Employee Rate: 10\n",
            "Salary ID: A02\n",
            "Salary: 10000\n",
            "Cut-off Date: 2024-09-23\n",
            "Days of Work: 5\n"
          ]
        }
      ]
    }
  ]
}
